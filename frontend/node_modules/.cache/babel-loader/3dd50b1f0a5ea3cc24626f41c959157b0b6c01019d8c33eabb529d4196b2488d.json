{"ast":null,"code":"const employeeAuthHeader = async () => {\n  // console.log(\"Inside employeeAuthHeader\");\n  const employee = await JSON.parse(localStorage.getItem('employee'));\n  if (employee && employee.employee_token) {\n    console.log(\"Inside employeeAuthHeader if statement\");\n    const decodedToken = await decodeTokenPayload(employee.employee_token);\n    console.log(decodedToken);\n    employee.employee_role = decodedToken.employee_role;\n    employee.employee_id = decodedToken.employee_id;\n    employee.employee_first_name = decodedToken.employee_first_name;\n    return employee;\n  } else {\n    return {};\n  }\n};\n\n// Function to decode the payload from the token\n// The purpose of this code is to take a JWT token, extract its payload, decode it from Base64Url encoding, and then convert the decoded payload into a JavaScript object for further use and manipulation\nconst decodeTokenPayload = token => {\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`).join(''));\n  return JSON.parse(jsonPayload);\n};\nexport default employeeAuthHeader;","map":{"version":3,"names":["employeeAuthHeader","employee","JSON","parse","localStorage","getItem","employee_token","console","log","decodedToken","decodeTokenPayload","employee_role","employee_id","employee_first_name","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join"],"sources":["C:/Users/mesaa/Desktop/abeGarageAppProject/CodeBase/abegaragemainapp/frontend/src/utils/auth.header.js"],"sourcesContent":["const employeeAuthHeader = async () => {\n  // console.log(\"Inside employeeAuthHeader\");\n  const employee = await JSON.parse(localStorage.getItem('employee'));\n  if (employee && employee.employee_token) {\n    console.log(\"Inside employeeAuthHeader if statement\");\n    const decodedToken = await decodeTokenPayload(employee.employee_token);\n    console.log(decodedToken);\n    employee.employee_role = decodedToken.employee_role;\n    employee.employee_id = decodedToken.employee_id;\n    employee.employee_first_name = decodedToken.employee_first_name;\n    return employee;\n  } else {\n    return {};\n  }\n}\n\n// Function to decode the payload from the token\n// The purpose of this code is to take a JWT token, extract its payload, decode it from Base64Url encoding, and then convert the decoded payload into a JavaScript object for further use and manipulation\nconst decodeTokenPayload = (token) => {\n  const base64Url = token.split('.')[1];\n  const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n  const jsonPayload = decodeURIComponent(\n    atob(base64)\n      .split('')\n      .map((c) => `%${`00${c.charCodeAt(0).toString(16)}`.slice(-2)}`)\n      .join('')\n  );\n  return JSON.parse(jsonPayload);\n};\n\nexport default employeeAuthHeader;"],"mappings":"AAAA,MAAMA,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EACrC;EACA,MAAMC,QAAQ,GAAG,MAAMC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAAC;EACnE,IAAIJ,QAAQ,IAAIA,QAAQ,CAACK,cAAc,EAAE;IACvCC,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACrD,MAAMC,YAAY,GAAG,MAAMC,kBAAkB,CAACT,QAAQ,CAACK,cAAc,CAAC;IACtEC,OAAO,CAACC,GAAG,CAACC,YAAY,CAAC;IACzBR,QAAQ,CAACU,aAAa,GAAGF,YAAY,CAACE,aAAa;IACnDV,QAAQ,CAACW,WAAW,GAAGH,YAAY,CAACG,WAAW;IAC/CX,QAAQ,CAACY,mBAAmB,GAAGJ,YAAY,CAACI,mBAAmB;IAC/D,OAAOZ,QAAQ;EACjB,CAAC,MAAM;IACL,OAAO,CAAC,CAAC;EACX;AACF,CAAC;;AAED;AACA;AACA,MAAMS,kBAAkB,GAAII,KAAK,IAAK;EACpC,MAAMC,SAAS,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACrC,MAAMC,MAAM,GAAGF,SAAS,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACA,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EAC9D,MAAMC,WAAW,GAAGC,kBAAkB,CACpCC,IAAI,CAACJ,MAAM,CAAC,CACTD,KAAK,CAAC,EAAE,CAAC,CACTM,GAAG,CAAEC,CAAC,IAAM,IAAI,KAAIA,CAAC,CAACC,UAAU,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAE,EAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAE,EAAC,CAAC,CAC/DC,IAAI,CAAC,EAAE,CACZ,CAAC;EACD,OAAOzB,IAAI,CAACC,KAAK,CAACgB,WAAW,CAAC;AAChC,CAAC;AAED,eAAenB,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}